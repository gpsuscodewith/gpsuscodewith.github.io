<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GPSUS Playbook – Testing</title>
    <link>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/</link>
    <description>Recent content in Testing on GPSUS Playbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Automated-Testing: Test Type</title>
      <link>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/e2e-testing/test_type_template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/e2e-testing/test_type_template/</guid>
      <description>
        
        
        &lt;h1 id=&#34;test-type&#34;&gt;~Test type~&lt;/h1&gt;
&lt;p&gt;The document should start with a brief overview about the test type and what is covered in this document, the goal here is to provide a high-level description to help the reader understand what is covered to decide whether to continue reading or not.&lt;/p&gt;
&lt;h2 id=&#34;why-test-type-the-why&#34;&gt;Why ~Test type~ [The Why]&lt;/h2&gt;
&lt;p&gt;Start by describing the problem that this test type addresses, this should focus on the motivation behind the test type to aid the reader corelate this test type to the problem they are trying to resolve.&lt;/p&gt;
&lt;h2 id=&#34;test-type-design-blocks-the-what&#34;&gt;~Test type~ Design Blocks [The What]&lt;/h2&gt;
&lt;p&gt;In this section, describe the test type, its components, and how they interact to solve the problem described above.&lt;/p&gt;
&lt;h2 id=&#34;applying-the-test-type-the-how&#34;&gt;Applying the ~test type~ [the how]&lt;/h2&gt;
&lt;p&gt;In this section, describe what good testing looks like for this test type, discuss some of the best practices, discuss pitfalls to avoid, and finally discuss some of the common tools used to apply the test type, if any.&lt;/p&gt;
&lt;h2 id=&#34;test-type-frameworks-and-tools&#34;&gt;~Test type~ Frameworks and Tools&lt;/h2&gt;
&lt;p&gt;In this section, describe various test frameworks and tools, their pros and cons, and provide with the links to where to get more information.&lt;/p&gt;
&lt;h2 id=&#34;examplescase-studies&#34;&gt;Examples/Case studies&lt;/h2&gt;
&lt;p&gt;If available, list some good examples or case studies for this test type and elaborate on what is good about them.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, provide the final thoughts on why and how this type of test can help with your next customer engagement, what best practices and recommendations that can be withdrawn from the case studies and research.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;List additional readings about this test type for those that would like to dive deeper.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Automated-Testing: Testing Comparison</title>
      <link>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/e2e-testing/testing-comparison/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/e2e-testing/testing-comparison/</guid>
      <description>
        
        
        &lt;h1 id=&#34;unit-vs-integration-vs-system-vs-e2e-testing&#34;&gt;Unit vs Integration vs System vs E2E Testing&lt;/h1&gt;
&lt;p&gt;To better understand which testing methodology when to apply it in your project, the below table illustrates the most critical characteristics and differences between Unit, Integration, System and End-to-End testing:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Characteristics&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;Unit Test&lt;/th&gt;
&lt;th&gt;Integration Test&lt;/th&gt;
&lt;th&gt;System Testing&lt;/th&gt;
&lt;th&gt;E2E Test&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Scope&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;A module, APIs&lt;/td&gt;
&lt;td&gt;Modules, Interfaces&lt;/td&gt;
&lt;td&gt;Application, System&lt;/td&gt;
&lt;td&gt;All sub-systems, network dependencies, services and databases&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Tiny&lt;/td&gt;
&lt;td&gt;Small to Medium&lt;/td&gt;
&lt;td&gt;Large&lt;/td&gt;
&lt;td&gt;X-Large&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Environment&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Development&lt;/td&gt;
&lt;td&gt;Integration test&lt;/td&gt;
&lt;td&gt;QA test&lt;/td&gt;
&lt;td&gt;Production like&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Data&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Mock data&lt;/td&gt;
&lt;td&gt;Test data&lt;/td&gt;
&lt;td&gt;Test data&lt;/td&gt;
&lt;td&gt;Copy of real production data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SUT&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Isolated unit test&lt;/td&gt;
&lt;td&gt;Tests interfaces and flow data between the modules&lt;/td&gt;
&lt;td&gt;Tests a particular system as a whole&lt;/td&gt;
&lt;td&gt;Tests an application flow from start to end&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Scenarios&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The test scenarios use developers perspectives&lt;/td&gt;
&lt;td&gt;The test scenarios use developers and IT Pro testers perspectives&lt;/td&gt;
&lt;td&gt;The test scenarios use the developers and QA testers perspectives&lt;/td&gt;
&lt;td&gt;The test scenarios use the end-user perspectives&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;When it happens&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Unit testing happens after each build&lt;/td&gt;
&lt;td&gt;Integration test happens after Unit testing&lt;/td&gt;
&lt;td&gt;System testing happens before the E2E testing and after Unit and Integration testing&lt;/td&gt;
&lt;td&gt;E2E testing happens after System testing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Automated or Manual&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Automation testing&lt;/td&gt;
&lt;td&gt;It can be manual or automation testing&lt;/td&gt;
&lt;td&gt;It can be manual or automation testing&lt;/td&gt;
&lt;td&gt;It is a manual testing&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Automated-Testing: Testing Methods</title>
      <link>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/e2e-testing/testing-methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/e2e-testing/testing-methods/</guid>
      <description>
        
        
        &lt;h2 id=&#34;horizontal-test&#34;&gt;Horizontal Test&lt;/h2&gt;
&lt;p&gt;This method is used very commonly. It occurs horizontally across the context of multiple applications. Take an example of a data ingest management system.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/horizontal-e2e-testing.png&#34; alt=&#34;Horizontal Test&#34;&gt;&lt;/p&gt;
&lt;p&gt;The inbound data may be  injected from various sources, but it then &amp;ldquo;flatten&amp;rdquo; into a horizontal processing pipeline that may include various components, such as a gateway API, data transformation, data validation, storage, etc&amp;hellip; Throughout the entire Extract-Transform-Load (ETL) processing, the data flow can be tracked and monitored under the horizontal spectrum with little sprinkles of optional, and thus not important for the overal E2E test case, services, like logging, auditing, authentication.&lt;/p&gt;
&lt;h2 id=&#34;vertical-test&#34;&gt;Vertical Test&lt;/h2&gt;
&lt;p&gt;In this method, all most critical transactions of any application are verified and evaluated right from the start to finish. Each individual layer of the application is tested starting from top to bottom. Take an example of a web-based application that uses middleware services for reaching back-end resources.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/vertical-e2e-testing.png&#34; alt=&#34;Vertical Test&#34;&gt;&lt;/p&gt;
&lt;p&gt;In such case, each layer (tier) is required to be fully tested in conjunction with the &amp;ldquo;connected&amp;rdquo; layers above and beneath, in which services &amp;ldquo;talk&amp;rdquo; to each other during the end to end data flow. All these complex testing scenarios will require proper validation and dedicated automated testing. Thus this method is much more difficult.&lt;/p&gt;
&lt;h2 id=&#34;e2e-test-cases-design-guidances&#34;&gt;E2E Test Cases Design Guidances&lt;/h2&gt;
&lt;p&gt;Below enlisted are few &lt;strong&gt;guidelines&lt;/strong&gt; that should be kept in mind while designing the test cases for performing E2E testing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test cases should be designed from the end user’s perspective.&lt;/li&gt;
&lt;li&gt;Should focus on testing some existing features of the system.&lt;/li&gt;
&lt;li&gt;Multiple scenarios should be considered for creating multiple test cases.&lt;/li&gt;
&lt;li&gt;Different sets of test cases should be created to focus on multiple scenarios of the system.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Automated-Testing: </title>
      <link>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/e2e-testing/case-studies/kroger-datascience/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/e2e-testing/case-studies/kroger-datascience/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Automated-Testing: </title>
      <link>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/e2e-testing/recipes/gauge-framework/gauge-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/e2e-testing/recipes/gauge-framework/gauge-framework/</guid>
      <description>
        
        
        &lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Gauge is a free and open source framework for writing and running E2E tests. Some of the key features of Gauge that makes it unique include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple, flexible and rich syntax based on Markdown.&lt;/li&gt;
&lt;li&gt;Consistent cross platform/language support for writing test code.&lt;/li&gt;
&lt;li&gt;A modular architecture with plugins support&lt;/li&gt;
&lt;li&gt;Extensible through plugins and hackable.&lt;/li&gt;
&lt;li&gt;Supports data driven execution and external data sources&lt;/li&gt;
&lt;li&gt;Helps you create maintainable test suites&lt;/li&gt;
&lt;li&gt;Supports Visual Studio Code, Intellij IDEA, IDE Support&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-is-a-specification&#34;&gt;What is a Specification&lt;/h2&gt;
&lt;p&gt;Gauge specifications are written using a Markdown syntax. For example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Search for the data blob&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## Look for file&lt;/span&gt;
* Goto Azure blob
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this specification &lt;em&gt;Search for the data blob&lt;/em&gt; is the &lt;strong&gt;specification heading&lt;/strong&gt;, &lt;em&gt;Look for file&lt;/em&gt; is a &lt;strong&gt;scenario&lt;/strong&gt; with a step &lt;em&gt;Goto Azure blob&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-is-an-implementation&#34;&gt;What is an Implementation&lt;/h2&gt;
&lt;p&gt;You can implement the steps in a specification using a programming language, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;from getgauge.python import step
import os
from step_impl.utils.driver import Driver
@step&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Goto Azure blob&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
def gotoAzureStorage&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;:
  &lt;span style=&#34;color:#000&#34;&gt;URL&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; os.getenv&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;STORAGE_ENDPOINT&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
  Driver.driver.get&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;URL&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Gauge runner reads and runs steps and its implementation for every scenario in the specification and generates a report of passing or failing scenarios.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Search for the data blob&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## Look for file  ✔&lt;/span&gt;

Successfully generated html-report &lt;span style=&#34;color:#000&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&amp;gt; reports/html-report/index.html
Specifications:       &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; executed      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; passed        &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; failed        &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; skipped
Scenarios:    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; executed      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; passed        &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; failed        &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; skipped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;re-using-steps&#34;&gt;Re-using Steps&lt;/h2&gt;
&lt;p&gt;Gauge helps you focus on testing the flow of an application. Gauge does this by making steps as re-usable as possible. With Gauge, you don’t need to build custom frameworks using a programming language.&lt;/p&gt;
&lt;p&gt;For example, Gauge steps can pass parameters to an implementation by using a text with quotes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Search for the data blob&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## Look for file&lt;/span&gt;
* Goto Azure blob
* Search &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;store_data.csv&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The implementation can now use “store_data.csv” as follows&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;from getgauge.python import step
import os
@step&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Search for &amp;lt;query&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
def searchForQuery&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;query&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;:
  write&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;query&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
  press&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Enter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;

step&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Search for &amp;lt;query&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;query&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
  write&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;query&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
  press&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Enter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can then re-use this step within or across scenarios with different parameters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Search for the data blob&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## Look for Store data #1&lt;/span&gt;
* Goto Azure blob
* Search &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;store_1.csv&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## Look for Store data #2&lt;/span&gt;
* Goto Azure blob
* Search &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;store_2.csv&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or combine more than one step into &lt;strong&gt;concepts&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Search Azure Storage for &amp;lt;query&amp;gt;&lt;/span&gt;
* Goto Azure blob
* Search &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;store_1.csv&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The concept, Search Azure Storage for &lt;code&gt;&amp;lt;query&amp;gt;&lt;/code&gt; can be used like a step in a specification&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Search for the data blob&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## Look for Store data #1&lt;/span&gt;
* Search Azure Storage &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;store_1.csv&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## Look for Store data #2&lt;/span&gt;
* Search Azure Storage &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;store_2.csv&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;data-driven-testing&#34;&gt;Data-Driven Testing&lt;/h2&gt;
&lt;p&gt;Gauge also supports data driven testing using Markdown tables as well as external csv files for example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Search for the data blob&lt;/span&gt;

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;query    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;---------&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;store_1  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;store_2  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;store_3  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## Look for stores data&lt;/span&gt;
* Search Azure Storage &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &amp;lt;query&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will execute the scenario for all rows in the table.&lt;/p&gt;
&lt;p&gt;In the examples above, we refactored a specification to be concise and flexible without changing the implementation.&lt;/p&gt;
&lt;h2 id=&#34;other-features&#34;&gt;Other Features&lt;/h2&gt;
&lt;p&gt;This is brief introduction to a few Gauge features. Please refer to the Gauge documentation for additional features such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.gauge.org/getting_started/view-a-report.html&#34;&gt;Reports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.gauge.org/execution.html?#filter-specifications-and-scenarios-by-using-tags&#34;&gt;Tags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.gauge.org/execution.html#filter-specifications-and-scenarios-by-using-tags&#34;&gt;Parallel execution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.gauge.org/configuration.html#using-environments-in-a-gauge-project&#34;&gt;Environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.gauge.org/writing-specifications.html#taking-custom-screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.gauge.org/plugin.html&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And much more&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installing-gauge&#34;&gt;Installing Gauge&lt;/h2&gt;
&lt;p&gt;This getting started guide takes you through the core features of Gauge. By the end of this guide, you’ll be able to install Gauge and learn how to create your first Gauge test automation project.&lt;/p&gt;
&lt;h2 id=&#34;installation-instructions-for-windows-os&#34;&gt;Installation Instructions for Windows OS&lt;/h2&gt;
&lt;h3 id=&#34;step-1-installing-gauge-on-windows&#34;&gt;Step 1: Installing Gauge on Windows&lt;/h3&gt;
&lt;p&gt;This section gives specific instructions on setting up Gauge in a Microsoft Windows environment.
Download the following &lt;a href=&#34;https://github.com/getgauge/gauge/releases/download/v1.0.6/gauge-1.0.6-windows.x86_64.exe&#34;&gt;installation bundle&lt;/a&gt; to get the latest stable release of Gauge.&lt;/p&gt;
&lt;h3 id=&#34;step-2-installing-gauge-extension-for-visual-studio-code&#34;&gt;Step 2: Installing Gauge extension for Visual Studio Code&lt;/h3&gt;
&lt;p&gt;Follow the steps to add the Gauge Visual Studio Code plugin from the IDE&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the following &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=getgauge.gauge&#34;&gt;Gauge extension for Visual Studio Code&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;troubleshooting-installation&#34;&gt;Troubleshooting Installation&lt;/h3&gt;
&lt;p&gt;If, when you run your first gauge spec you receive the error of missing python packages, open the command line terminal window and run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python.exe -m pip install &lt;span style=&#34;color:#000&#34;&gt;getgauge&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;0.3.7 --user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;installation-instructions-for-macos&#34;&gt;Installation Instructions for MacOS&lt;/h2&gt;
&lt;h3 id=&#34;step-1-installing-gauge-on-macos&#34;&gt;Step 1: Installing Gauge on macOS&lt;/h3&gt;
&lt;p&gt;This section gives specific instructions on setting up Gauge in a macOS environment.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install brew if you haven’t already: Go to the &lt;a href=&#34;https://brew.sh/&#34;&gt;brew website&lt;/a&gt;, and follow the directions there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the brew command to install Gauge&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; brew install gauge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;if HomeBrew is working properly, you should see something similar to the following:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&amp;gt; Downloading https://homebrew.bintray.com/bottles/gauge-1.0.6.mojave.bottle.tar.gz
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&amp;gt; Downloading from https://akamai.bintray.com/45/45b496b39ee682a95ca49b36a94e8041e03fca3644e80223c36539f495fee384?__gda__&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;exp&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;1568017021~hmac&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;f6ca3a9
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;######################################################################## 100.0%&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&amp;gt; Pouring gauge-1.0.6.mojave.bottle.tar.gz
🍺  /usr/local/Cellar/gauge/1.0.6: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt; files, 18.5MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-2--installing-gauge-extension-for-visual-studio-code&#34;&gt;Step 2 : Installing Gauge extension for Visual Studio Code&lt;/h3&gt;
&lt;p&gt;Follow the steps to add the Gauge Visual Studio Code plugin from the IDE&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the following &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=getgauge.gauge&#34;&gt;Gauge extension for Visual Studio Code&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;post-installation-troubleshooting&#34;&gt;Post-Installation Troubleshooting&lt;/h3&gt;
&lt;p&gt;If, when you run your first gauge spec you receive the error of missing python packages, open the command line terminal window and run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python.exe -m pip install &lt;span style=&#34;color:#000&#34;&gt;getgauge&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;0.3.7 --user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Automated-Testing: </title>
      <link>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/templates/case-study-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/templates/case-study-template/</guid>
      <description>
        
        
        &lt;h1 id=&#34;customer-project-case-study&#34;&gt;~Customer Project~ Case Study&lt;/h1&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Describe the customer and business requirements with the explicit problem statement.&lt;/p&gt;
&lt;h2 id=&#34;system-under-test-sut&#34;&gt;System Under Test (SUT)&lt;/h2&gt;
&lt;p&gt;Include the system&amp;rsquo;s conceptual architecture and highlight the architecture components that were included in the E2E testing.&lt;/p&gt;
&lt;h2 id=&#34;problems-and-limitations&#34;&gt;Problems and Limitations&lt;/h2&gt;
&lt;p&gt;Describe about the problems of the overal SUT solution that prevented from testing specific (or any) part of the solution.
Describe limitation of the testing tools and framework(s) used in this implementation&lt;/p&gt;
&lt;h2 id=&#34;e2e-testing-framework-and-tools&#34;&gt;E2E Testing Framework and Tools&lt;/h2&gt;
&lt;p&gt;Describe what testing framework and/or tools were used to implement E2E testing in the SUT.&lt;/p&gt;
&lt;h2 id=&#34;test-cases&#34;&gt;Test Cases&lt;/h2&gt;
&lt;p&gt;Describe the E2E test cases were created to E2E test the SUT&lt;/p&gt;
&lt;h2 id=&#34;test-metrics&#34;&gt;Test Metrics&lt;/h2&gt;
&lt;p&gt;Describe any architecture solution were used to monitor, observe and track the various service states that were used as the E2E testing metrics. Also, include the list of test cases were build to measure the progress of E2E testing.&lt;/p&gt;
&lt;h2 id=&#34;e2e-testing-architecture&#34;&gt;E2E Testing Architecture&lt;/h2&gt;
&lt;p&gt;Describe any testing architecture were built to run E2E testing.&lt;/p&gt;
&lt;h2 id=&#34;e2e-testing-implementation-code-samples&#34;&gt;E2E Testing Implementation (Code samples)&lt;/h2&gt;
&lt;p&gt;Include sample test cases and their implementation in the programming language of choice.
Include any common reusable code implementation blocks that could be leveraged in the future project&amp;rsquo;s E2E testing implementation.&lt;/p&gt;
&lt;h2 id=&#34;e2e-testing-reporting-and-results&#34;&gt;E2E Testing Reporting and Results&lt;/h2&gt;
&lt;p&gt;Include sample of E2E testing reports and results obtained from the E2E testing runs in this project.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Automated-Testing: </title>
      <link>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/templates/test_type_template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://github.com/gpsuscodewith/gpsuscodewith.github.io/automated-testing/templates/test_type_template/</guid>
      <description>
        
        
        &lt;h1 id=&#34;test-type&#34;&gt;~Test type~&lt;/h1&gt;
&lt;p&gt;The document should start with a brief overview about the test type and what is covered in this document, the goal here is to provide a high-level description to help the reader understand what is covered to decide whether to continue reading or not.&lt;/p&gt;
&lt;h2 id=&#34;why-test-type-the-why&#34;&gt;Why ~Test type~ [The Why]&lt;/h2&gt;
&lt;p&gt;Start by describing the problem that this test type addresses, this should focus on the motivation behind the test type to aid the reader corelate this test type to the problem they are trying to resolve.&lt;/p&gt;
&lt;h2 id=&#34;test-type-design-blocks-the-what&#34;&gt;~Test type~ Design Blocks [The What]&lt;/h2&gt;
&lt;p&gt;In this section, describe the test type, its components, and how they interact to solve the problem described above.&lt;/p&gt;
&lt;h2 id=&#34;applying-the-test-type-the-how&#34;&gt;Applying the ~test type~ [the how]&lt;/h2&gt;
&lt;p&gt;In this section, describe what good testing looks like for this test type, discuss some of the best practices, discuss pitfalls to avoid, and finally discuss some of the common tools used to apply the test type, if any.&lt;/p&gt;
&lt;h2 id=&#34;test-type-frameworks-and-tools&#34;&gt;~Test type~ Frameworks and Tools&lt;/h2&gt;
&lt;p&gt;In this section, describe various test frameworks and tools, their pros and cons, and provide with the links to where to get more information.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, provide the final thoughts on why and how this type of test can help with your next customer engagement, what best practices and recommendations that can be withdrawn from the case studies and research.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;List additional readings about this test type for those that would like to dive deeper.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
